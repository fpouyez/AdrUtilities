name: Release

on:
  push:
    branches:
      - master
      - alpha
      - beta

jobs:
  test:
    name: Test and lint
    uses: fpouyez/AdrUtilities/.github/workflows/development.yml@master

  release:
    name: Release
    needs: test
    runs-on: ubuntu-22.04
    outputs:
      # Pour exporter au niveau des jobs, pour que le job suivnat ait l'information.
      new_tag_version: ${{ steps.semantic_release.outputs.new_release_version }}
    steps:
      - name: "üõ°Ô∏è harden runner"
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-node-install
        with:
          node-version: 20

      # Garde-fou : v√©rifier qu'une release sera cr√©√©e
      - name: Dry run to verify release will be created
        env:
          GITHUB_TOKEN: ${{ secrets.SEM_RELEASE_PAT }}
        run: |
          npx semantic-release --dry-run | grep -q "The next release version is" || (echo "No release will be created" && exit 1)

      - name: Semantic Release üî•
        id: semantic_release
        uses: cycjimmy/semantic-release-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.SEM_RELEASE_PAT }}

  publish:
    needs: release
    if: ${{ needs.release.outputs.new_tag_version != '' && needs.release.outputs.new_tag_version != 'undefined' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: v${{ needs.release.outputs.new_tag_version }}
      - uses: ./.github/actions/setup-node-install
        with:
          node-version: 20
      
      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Wait for tag to be available
        run: |
          echo "Waiting for tag v${{ needs.release.outputs.new_tag_version }} to be available..."
          for i in {1..10}; do
            if git rev-parse "v${{ needs.release.outputs.new_tag_version }}" >/dev/null 2>&1; then
              echo "‚úÖ Tag v${{ needs.release.outputs.new_tag_version }} is available"
              break
            fi
            echo "Attempt $i: Tag not found, waiting 3 seconds..."
            sleep 3
          done
          
          # Final check
          if ! git rev-parse "v${{ needs.release.outputs.new_tag_version }}" >/dev/null 2>&1; then
            echo "ERROR: Tag v${{ needs.release.outputs.new_tag_version }} not found after waiting"
            echo "Available tags:"
            git tag --list | tail -5
            exit 1
          fi

      - name: Verify we are on the correct tag
        run: |
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Expected tag: v${{ needs.release.outputs.new_tag_version }}"
          
          # Try to get the current tag
          CURRENT_TAG=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "NO_TAG")
          echo "Current tag: $CURRENT_TAG"
          
          # If we're not on the expected tag, try to checkout it explicitly
          if [ "$CURRENT_TAG" != "v${{ needs.release.outputs.new_tag_version }}" ]; then
            echo "‚ö†Ô∏è  Not on expected tag, trying to checkout explicitly..."
            git checkout "v${{ needs.release.outputs.new_tag_version }}" || {
              echo "ERROR: Cannot checkout tag v${{ needs.release.outputs.new_tag_version }}"
              echo "Available tags:"
              git tag --list | tail -5
              exit 1
            }
            echo "‚úÖ Successfully checked out tag v${{ needs.release.outputs.new_tag_version }}"
          else
            echo "‚úÖ Already on correct tag"
          fi

      - name: Force clean checkout if needed
        run: |
          git reset --hard HEAD
          git clean -fd
          echo "‚úÖ Clean checkout completed"

      - name: Check package version
        run: cat package.json | grep version

      - name: Check CHANGELOG.md is up to date
        run: |
          echo "=== CHANGELOG.md content ==="
          head -20 CHANGELOG.md
          echo "=== End of CHANGELOG preview ==="
          echo "CHANGELOG.md exists and is readable"

      - name: Verify tag contains updated files
        run: |
          echo "=== Files in current tag ==="
          git ls-tree -r HEAD --name-only | grep -E "(package\.json|CHANGELOG\.md)" || echo "No package.json or CHANGELOG.md found"
          echo "=== Git log for current tag ==="
          git log --oneline -3

      - name: "üì¶ install vsce"
        run: npm install -g vsce

      - name: "üì§ Publish VSCode extension"
        env:
          PUBLISHER_TOKEN: ${{ secrets.PUBLISHER_TOKEN }}
        run: vsce publish -p $PUBLISHER_TOKEN